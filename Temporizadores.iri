handler Timer1Trip;
Peso : real;
begin 
     --Obtiene el peso de la bascula 1
     GetNet(1,Primary,Peso);   
                                                     
     if Peso < (Bascula1.CeroBascula + 0.5) then 
        if Bascula1.Bajando = 0 then
           --Un rodo salió
           VerificarPeso(1);
           Bascula1.LecMax := Bascula1.CeroBascula;
           Bascula1.Bajando := 1;        
        end if; 
     else
         Bascula1.Bajando := 0;
         if Peso > Bascula1.LecMax then
            Bascula1.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer2Trip;
Peso : real;
begin
     -- Obtiene el peso de la báscula 2
     GetNet(2, Primary, Peso);

     if Peso < (Bascula2.CeroBascula + 0.5) then 
        if Bascula2.Bajando = 0 then
           -- Un rodillo salió
           VerificarPeso(2);
           Bascula2.LecMax := Bascula2.CeroBascula;
           Bascula2.Bajando := 1;             
        end if; 
     else
         Bascula2.Bajando := 0;
         if Peso > Bascula2.LecMax then
            Bascula2.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer3Trip;
Peso : real;
begin
     -- Obtiene el peso de la báscula 3
     GetNet(3, Primary, Peso);

     if Peso < (Bascula3.CeroBascula + 0.5) then 
        if Bascula3.Bajando = 0 then
           -- Un rodillo salió
           VerificarPeso(3);
           Bascula3.LecMax := Bascula3.CeroBascula;
           Bascula3.Bajando := 1;            
        end if; 
     else
         Bascula3.Bajando := 0;
         if Peso > Bascula3.LecMax then
            Bascula3.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer4Trip;
Peso : real;
begin
     -- Obtiene el peso de la báscula 4
     GetNet(4, Primary, Peso);

     if Peso < (Bascula4.CeroBascula + 0.5) then 
        if Bascula4.Bajando = 0 then
           -- Un rodillo salió
           VerificarPeso(4);
           Bascula4.LecMax := Bascula4.CeroBascula;
           Bascula4.Bajando := 1;  
        end if; 
     else
         Bascula4.Bajando := 0;
         if Peso > Bascula4.LecMax then
            Bascula4.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer5Trip;
--Declaration Section
begin
     ApagarPiston(1);
end;


handler Timer6Trip;
--Declaration Section

begin
     ApagarPiston(2);
end;


handler Timer7Trip;
  
begin
  ApagarPiston(3);
end;

             
handler Timer8Trip;
--Declaration Section

begin
     ApagarPiston(4);
return;
end;

handler Timer9Trip;
--Declaration Section
begin
     EncenderPiston(1);
return;
end;

handler Timer10Trip;
--Declaration Section

begin
     EncenderPiston(1);
return;
end;

handler Timer11Trip;
--Declaration Section

begin
    EncenderPiston(1);
return;
end;

handler Timer12Trip;
--Declaration Section

begin
     EncenderPiston(1);
return;

end;

handler Timer17Trip;
--Declaration Section

begin
     GuardarEnBD;
return; 
end;

handler Timer18Trip;
Peso : real;
begin  
     -- Selecciona la báscula basada en la variable Basc
     GetNet(Basc, Primary, Peso);
     
         if Peso < (Basculas[Basc].LecMin - 0.2) and Basculas[Basc].Bajando = 0 then
             Basculas[Basc].LecMin := Peso;
         elsif Basculas[Basc].Bajando = 0 and Peso > (Basculas[Basc].LecMin + 0.2) then 
             Basculas[Basc].LecMax := Basculas[Basc].LecMin;
             Basculas[Basc].Bajando := 1;
         end if;
         
         if Peso > (Basculas[Basc].LecMax + 0.2) and Basculas[Basc].Bajando = 1 then 
             Basculas[Basc].LecMax := Peso;
         elsif Basculas[Basc].Bajando = 1 and Peso < (Basculas[Basc].LecMax - 0.2) then
             Basculas[Basc].Bajando := 0;
             
             -- Tensión más peso meta
             if (Basculas[Basc].LecMax - Basculas[Basc].LecMin) > (2) then 
                 
                 if Basculas[Basc].Contador = 122 then
                   Basculas[Basc].Contador  := 1; 
                 else
                      Basculas[Basc].Contador := Basculas[Basc].Contador + 1;
                 end if;
                  
                 --GuardarPruebasEnBD(Basc,1);  
                 if (Basculas[Basc].LecMax - MatrizPesos[1, Basculas[Basc].Contador]) >= 4.0 then
                     DisplayStatus("Lec: " + RealToString(Basculas[Basc].LecMax, 2, 2) + 
              " -  " + RealToString(MatrizPesos[1, Basculas[Basc].Contador], 2, 2)  + " - " 
               + IntegerToString(Basculas[Basc].Contador,3));
                    GuardarEnBDconTara(Basc,2);
                    Temporizador(9, VOn, TimerOneShot, Accion);
                 end if;  
                   
             end if; 
             
            
            Basculas[Basc].LecMin := Basculas[Basc].LecMax;
         end if;
         
end;

--Calibracion
handler Timer19Trip;
Peso : real;
begin
   -- Selecciona la báscula basada en la variable Basc
     GetNet(Basc, Primary, Peso);
     
         if Peso < (Basculas[Basc].LecMin - 0.2) and Basculas[Basc].Bajando = 0 then
             Basculas[Basc].LecMin := Peso;
         elsif Basculas[Basc].Bajando = 0 and Peso > (Basculas[Basc].LecMin + 0.2) then 
             Basculas[Basc].LecMax := Basculas[Basc].LecMin;
             Basculas[Basc].Bajando := 1;
         end if;
         
         if Peso > (Basculas[Basc].LecMax + 0.2) and Basculas[Basc].Bajando = 1 then 
             Basculas[Basc].LecMax := Peso;
         elsif Basculas[Basc].Bajando = 1 and Peso < (Basculas[Basc].LecMax - 0.2) then
             Basculas[Basc].Bajando := 0;
             
             -- Tensión más peso meta
             if (Basculas[Basc].LecMax - Basculas[Basc].LecMin) > (2) then 
                    GuardarPruebasEnBD(Basc,1); 
             end if; 
             
            Basculas[Basc].LecMin := Basculas[Basc].LecMax;
   end if;       
end;
