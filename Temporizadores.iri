handler Timer1Trip;
Peso : real;
begin 
     --Obtiene el peso de la bascula 1
     GetNet(1,Primary,Peso);   
                                                     
     if Peso < (Bascula1.CeroBascula + 0.5) then 
        if Bascula1.Bajando = 0 then
           --Un rodo salió
           VerificarPeso(1);
           Bascula1.LecMax := Bascula1.CeroBascula;
           Bascula1.Bajando := 1;        
        end if; 
     else
         Bascula1.Bajando := 0;
         if Peso > Bascula1.LecMax then
            Bascula1.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer2Trip;
Peso : real;
begin
     -- Obtiene el peso de la báscula 2
     GetNet(2, Primary, Peso);

     if Peso < (Bascula2.CeroBascula + 0.5) then 
        if Bascula2.Bajando = 0 then
           -- Un rodillo salió
           VerificarPeso(2);
           Bascula2.LecMax := Bascula2.CeroBascula;
           Bascula2.Bajando := 1;             
        end if; 
     else
         Bascula2.Bajando := 0;
         if Peso > Bascula2.LecMax then
            Bascula2.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer3Trip;
Peso : real;
begin
     -- Obtiene el peso de la báscula 3
     GetNet(3, Primary, Peso);

     if Peso < (Bascula3.CeroBascula + 0.5) then 
        if Bascula3.Bajando = 0 then
           -- Un rodillo salió
           VerificarPeso(3);
           Bascula3.LecMax := Bascula3.CeroBascula;
           Bascula3.Bajando := 1;            
        end if; 
     else
         Bascula3.Bajando := 0;
         if Peso > Bascula3.LecMax then
            Bascula3.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer4Trip;
Peso : real;
begin
     -- Obtiene el peso de la báscula 4
     GetNet(4, Primary, Peso);

     if Peso < (Bascula4.CeroBascula + 0.5) then 
        if Bascula4.Bajando = 0 then
           -- Un rodillo salió
           VerificarPeso(4);
           Bascula4.LecMax := Bascula4.CeroBascula;
           Bascula4.Bajando := 1;  
        end if; 
     else
         Bascula4.Bajando := 0;
         if Peso > Bascula4.LecMax then
            Bascula4.LecMax := Peso;   
        end if;
     end if;
end;

handler Timer5Trip;
--Declaration Section

begin
     ApagarPiston(1);
end;


handler Timer6Trip;
--Declaration Section

begin
     ApagarPiston(2);
end;


handler Timer7Trip;
  
begin
  ApagarPiston(3);
end;

             
handler Timer8Trip;
--Declaration Section

begin
     ApagarPiston(4);
return;
end;

handler Timer9Trip;
--Declaration Section
begin
     BotarPollo(1);
return;
end;

handler Timer10Trip;
--Declaration Section

begin
     BotarPollo(2);
return;
end;

handler Timer11Trip;
--Declaration Section

begin
     BotarPollo(3);
return;
end;

handler Timer12Trip;
--Declaration Section

begin
     BotarPollo(4);
return;

end;

handler Timer17Trip;
--Declaration Section

begin
     GuardarEnBD;
return; 
end;

handler Timer18Trip;
Peso : real;

begin
     -- Selecciona la báscula basada en la variable Basc
     GetNet(Basc, Primary, Peso);
     
         if Peso < (Basculas[Basc].LecMin - 0.2) and Basculas[Basc].Bajando = 0 then
             Basculas[Basc].LecMin := Peso;
         elsif Basculas[Basc].Bajando = 0 and Peso > (Basculas[Basc].LecMin + 0.2) then
             DisplayStatus("Subiendo"); 
             Basculas[Basc].LecMax := Basculas[Basc].LecMin;
             Basculas[Basc].Bajando := 1;
         end if;
         
         if Peso > (Basculas[Basc].LecMax + 0.2) and Basculas[Basc].Bajando = 1 then 
             Basculas[Basc].LecMax := Peso;
         elsif Basculas[Basc].Bajando = 1 and Peso < (Basculas[Basc].LecMax - 0.2) then
             Basculas[Basc].Bajando := 0;
             
             -- Tensión más peso meta
             if (Basculas[Basc].LecMax - Basculas[Basc].LecMin) > (2) then
                 SetLabelText(Minimo6, RealToString(Basculas[Basc].LecMin, 2, 3)); 
                 SetLabelText(Maximo6, RealToString(((Basculas[Basc].LecMax - Basculas[Basc].LecMin) - 7.5), 2, 3)); 
                 Basculas[Basc].Contador := Basculas[Basc].Contador + 1;
                 
                 GuardarPruebasEnBD(Basc,1);
                 GuardarEnBDconTara(Basc,2);
             end if; 
             
             DisplayStatus("Bajando");
            Basculas[Basc].LecMin := Basculas[Basc].LecMax;
         end if;
         
end;

handler Timer19Trip;
Peso : real;
begin
    -- Selecciona la báscula basada en la variable Basc (1 a 4)
    GetNet(Basc, Primary, Peso);
    
    -- Usar variables del array para la báscula seleccionada
    if Peso < (Basculas[Basc].LecMin - 0.2) and Basculas[Basc].Bajando = 0 then
        Basculas[Basc].LecMin := Peso;
    elsif Basculas[Basc].Bajando = 0 and Peso > (Basculas[Basc].LecMin + 0.2) then
        DisplayStatus("Subiendo");
        Basculas[Basc].LecMax := Basculas[Basc].LecMin;
        Basculas[Basc].Bajando := 1;
    end if;
    
    if Peso > (Basculas[Basc].LecMax + 0.2) and Basculas[Basc].Bajando = 1 then
        Basculas[Basc].LecMax := Peso;
    elsif Basculas[Basc].Bajando = 1 and Peso < (Basculas[Basc].LecMax - 0.2) then
        Basculas[Basc].Bajando := 0;

        -- Tensión más peso meta
        if (Basculas[Basc].LecMax - Basculas[Basc].LecMin) > (2) then
            Basculas[Basc].Contador := Basculas[Basc].Contador + 1;
            MatrizPesos[Basc, Basculas[Basc].Contador] := Basculas[Basc].LecMax;
            GuardarPruebasEnBD(Basc,2);
        end if;
        
        DisplayStatus("Bajando");
        Basculas[Basc].LecMin := Basculas[Basc].LecMax;
    end if;
    
    return;
end;
                        
handler Timer20Trip;                                                    
Peso : Pesos;        
i: integer;

begin
  -- Verifica si todos los contadores son mayores o iguales a 19
  if (Basculas[1].Contador > 19) and (Basculas[2].Contador >= 19) and (Basculas[3].Contador >= 19) and (Basculas[4].Contador >= 19) then
    DisplayStatus("TimerDetenido");

  -- Actualiza los valores en los labels
for i := 1 to 4 
loop
    SetLabelText(41 + i, "Cero#" + IntegerToString(i,1) + ": " + RealToString(Basculas[i].CeroBascula, 2, 2));
end loop;
    
    -- Detiene el temporizador 20
    StopTimer(20);
  else
    SetBargraphLevel(40, Basculas[1].Contador * 100 / 19);

    -- Muestra los valores mínimos en la pantalla
    DisplayStatus("Min1: " + RealToString(Basculas[1].LecMin, 2, 2) +
                  " Min2: " + RealToString(Basculas[2].LecMin, 2, 2) +
                  " Min3: " + RealToString(Basculas[3].LecMin, 2, 2) +
                  " Min4: " + RealToString(Basculas[4].LecMin, 2, 2));

    -- Calibrando las básculas
    for i := 1 to 4
    loop
      GetNet(i, Primary, Peso[i]);

      if Basculas[i].Contador <> 19 then
        if Peso[i] < (Basculas[i].LecMin - 0.2) and (Basculas[i].Bajando = 0) then
          Basculas[i].LecMin := Peso[i];
        elsif (Basculas[i].Bajando = 0) and (Peso[i] > (Basculas[i].LecMin + 0.2)) then
          Basculas[i].LecMax := Basculas[i].LecMin;
          Basculas[i].Bajando := 1;
        end if;

        if Peso[i] > (Basculas[i].LecMax + 0.2) and (Basculas[i].Bajando = 1) then
          Basculas[i].LecMax := Peso[i];
        elsif (Basculas[i].Bajando = 1) and (Peso[i] < (Basculas[i].LecMax - 0.2)) then
          Basculas[i].Bajando := 0;
          if Basculas[i].EsPrimerLectura = 1 then
            Basculas[i].EsPrimerLectura := 0;
          else
            SetLabelText(41 + i, RealToString(Basculas[i].CeroBascula, 2, 2));
            Basculas[i].CeroBascula := Basculas[i].CeroBascula + Basculas[i].LecMin;
            Basculas[i].Contador := Basculas[i].Contador + 1;
            Basculas[i].LecMin := Basculas[i].LecMax;
          end if;
        end if;
      else
        Basculas[i].CeroBascula := Basculas[i].CeroBascula / 20.0;
        Basculas[i].Contador := Basculas[i].Contador + 1;
      end if;
    end loop;
  end if;
end;
